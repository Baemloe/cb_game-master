{"ast":null,"code":"var _jsxFileName = \"/Users/maksimgazdanov/Desktop/Chikanov/cb_game-master/cb_game-master/src/units/Table.js\";\nimport React from \"react\";\nimport TextUnits from \"./TextUnits\";\nimport List from \"./List\";\nimport Input from \"./Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ListTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.listsArray = new Map();\n    this.createList = this.getList.bind(this);\n    this.state = {\n      lArr: []\n    };\n  }\n  componentDidMount() {\n    this.props.start.up.current.state.set( /*#__PURE__*/_jsxDEV(TextUnits, {\n      textValue: this.props.data.taskText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 47\n    }, this));\n    this.props.start.control.current.state.mount([{\n      click: this.check.bind(this),\n      text: \"Проверить\"\n    }]);\n  }\n  render() {\n    // Задаем стиль для таблицы\n    const tableStyle = {\n      maxWidth: \"800px\",\n      // Максимальная ширина таблицы\n      margin: \"0 auto\" // Автоматические отступы для центрирования\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"TableContainer\",\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"TableWithGradient\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.props.data.table.map((row, index) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: row.map((cell, index_2) => {\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: cell.includes(\"check\") ? this.createList(cell, index + \"_\" + index_2) : cell\n                }, index + \"_\" + index_2, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 39,\n                  columnNumber: 31\n                }, this);\n              })\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 25\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 15\n    }, this);\n  }\n  getList(cell, key) {\n    let cellName = cell.split(\"_\");\n    let buff = /*#__PURE__*/React.createRef();\n    let jsx;\n    switch (cellName[1]) {\n      case \"list\":\n        jsx = /*#__PURE__*/_jsxDEV(List, {\n          index: cellName[2],\n          listArr: this.props.data.list,\n          ref: buff\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 23\n        }, this);\n        break;\n      case \"input\":\n        jsx = /*#__PURE__*/_jsxDEV(Input, {\n          index: cellName[2],\n          listArr: this.props.data.list,\n          ref: buff\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 23\n        }, this);\n        break;\n    }\n    if (!this.listsArray.has(key)) {\n      this.listsArray.set(key, buff);\n    }\n    return jsx;\n  }\n  check() {\n    let message = {\n      text_1: []\n    };\n    let mistakes = 0;\n    let points = true;\n    for (let oneList of this.listsArray.keys()) {\n      if (this.listsArray.get(oneList).current.state.result == null) {\n        message.text_1.push(\"Выбери все ответы!\");\n        this.props.start.up.current.state.set( /*#__PURE__*/_jsxDEV(TextUnits, {\n          textValue: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 55\n        }, this), true, 2000);\n        points = false;\n        break;\n      } else if (this.listsArray.get(oneList).current.state.result == 0) {\n        mistakes = mistakes + 1;\n      }\n    }\n    if (points) {\n      if (mistakes == 0) {\n        points = 5;\n      } else if (mistakes == 1) {\n        points = 4;\n      } else {\n        points = 0;\n      }\n      message.text_1.push(`Ты набрал ${points} очков!`);\n      this.props.start.up.current.state.set( /*#__PURE__*/_jsxDEV(TextUnits, {\n        textValue: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 51\n      }, this), true, 2000);\n      this.listsArray.forEach((value, key, map) => {\n        value.current.state.end();\n      });\n      this.props.start.up.current.state.pointsUpdate(points);\n      this.props.start.control.current.state.mount([{\n        click: this.props.start.next,\n        text: \"Дальше\"\n      }]);\n    }\n  }\n}\nexport default ListTable;","map":{"version":3,"names":["React","TextUnits","List","Input","jsxDEV","_jsxDEV","ListTable","Component","constructor","props","listsArray","Map","createList","getList","bind","state","lArr","componentDidMount","start","up","current","set","textValue","data","taskText","fileName","_jsxFileName","lineNumber","columnNumber","control","mount","click","check","text","render","tableStyle","maxWidth","margin","className","style","display","justifyContent","alignItems","children","table","map","row","index","cell","index_2","includes","key","cellName","split","buff","createRef","jsx","listArr","list","ref","has","message","text_1","mistakes","points","oneList","keys","get","result","push","forEach","value","end","pointsUpdate","next"],"sources":["/Users/maksimgazdanov/Desktop/Chikanov/cb_game-master/cb_game-master/src/units/Table.js"],"sourcesContent":["import React from \"react\";\nimport TextUnits from \"./TextUnits\";\nimport List from \"./List\";\nimport Input from \"./Input\";\nclass ListTable extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.listsArray = new Map();\n        this.createList = this.getList.bind(this);\n        this.state = \n        {\n            lArr: []\n        }\n    }\n    componentDidMount()\n    {\n        this.props.start.up.current.state.set(<TextUnits textValue={this.props.data.taskText}/>);\n        this.props.start.control.current.state.mount([{click: this.check.bind(this), text: \"Проверить\"}]);\n    }\n    render() {\n        // Задаем стиль для таблицы\n        const tableStyle = {\n          maxWidth: \"800px\", // Максимальная ширина таблицы\n          margin: \"0 auto\", // Автоматические отступы для центрирования\n\n        };\n\n            return (\n              <div className=\"TableContainer\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                <table className=\"TableWithGradient\">\n                  <tbody>\n                    {this.props.data.table.map((row, index) => {\n                      return (\n                        <tr key={index}>\n                          {row.map((cell, index_2) => {\n                            return (\n                              <td key={index + \"_\" + index_2}>\n                                {cell.includes(\"check\")\n                                  ? this.createList(cell, index + \"_\" + index_2)\n                                  : cell}\n                              </td>\n                            );\n                          })}\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            );\n          }\n\n    getList(cell, key)\n    {\n        \n        let cellName = cell.split(\"_\");      \n        let buff = React.createRef();\n        let jsx;\n        switch(cellName[1])\n        {\n            case \"list\":\n                jsx = <List index={cellName[2]} listArr={this.props.data.list} ref={buff}/>\n                break;\n            case \"input\":\n                jsx = <Input index ={cellName[2]} listArr={this.props.data.list} ref={buff}/>;\n                break;\n        }  \n        if(!this.listsArray.has(key))\n        {\n            this.listsArray.set(key, buff);\n        }\n        return jsx;\n    }\n    check()\n    {\n        let message = {text_1: []}\n        let mistakes = 0;\n        let points = true;\n        for(let oneList of this.listsArray.keys())\n        {\n\n            if(this.listsArray.get(oneList).current.state.result == null)\n            {\n                message.text_1.push(\"Выбери все ответы!\");\n                this.props.start.up.current.state.set(<TextUnits textValue={message}/>, true, 2000);\n                points = false;\n                break;\n            }\n            else if(this.listsArray.get(oneList).current.state.result == 0)\n            {\n                mistakes = mistakes + 1;\n            }\n        }\n        if(points)\n        {\n            if(mistakes == 0)\n            {\n                points = 5;\n            }\n            else if(mistakes == 1)\n            {\n                points = 4;\n            }\n            else\n            {\n                points = 0;\n            }\n            message.text_1.push(`Ты набрал ${points} очков!`);\n            this.props.start.up.current.state.set(<TextUnits textValue={message}/>, true, 2000);\n            this.listsArray.forEach((value, key, map)=>{\n                value.current.state.end();\n            });\n            this.props.start.up.current.state.pointsUpdate(points);\n            this.props.start.control.current.state.mount([{click: this.props.start.next, text: \"Дальше\"}]);\n        }\n    }\n}\nexport default ListTable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}